type Query {
  verifyAuth(token: String!): Boolean!
  latestLoadTest: LoadTest
  loadTest(id: String): LoadTest
  loadTestHistory(id: String, pageSize: Int!): [LoadTest!]!
  latestBlockStatHistory: BlockStatHistory!
  blockStatHistory(startTimestamp: Int!, endTimestamp: Int!): BlockStatHistory!
  ecBalance: EcBalance!
  agents: [Agent!]!
}

type Mutation {
  login(name: String!, password: String!): String!
  startTest(loadConfig: LoadConfigInput!): LoadTest!
  stopTest: LoadTest
}

type Subscription {
  latestLoadTestChanged: LoadTest!
  latestBlockStatHistoryChanged: BlockStatHistory!
  ecBalanceChanged: EcBalance!
  agentsChanged: [Agent!]!

}

###########

input LoadConfigInput {
  type: String!
  nbOfChains: Int!
  entrySizeRange: IntRangeInput!
  typeConfig: ConstantLoadConfigInput
}

input IntRangeInput {
  min: Int!
  max: Int!
}

input ConstantLoadConfigInput {
  eps: Float!
}

###########

type Agent {
  name: String!
}

type EcBalance {
  address: String!
  balance: Int!
}

type LoadTest {
  _id: String!
  start: StartStopEvent!
  end: StartStopEvent
  type: String!
  entrySizeRange: IntRange!
  chainIds: [String!]!
  agentsCount: Int!
  generatorConfig: ConstantLoadConfig!
  authoritySet: AuthoritySetInfo
}

type AuthoritySetInfo {
  leaders: Int!
  audits: Int!
  mainVersion: String!
  auditVersions: [NodeVersion!]!
  leaderVersions: [NodeVersion!]!
}

type NodeVersion {
  version: String!
  count: Int!
}

type ConstantLoadConfig {
  eps: Float!
}

type StartStopEvent {
  user: String!
  timestamp: Int!
}

type BlockStatHistory {
  nextBlockStartTime: Int!
  history: [BlockStat!]!
}

type BlockStat {
  height: Int!
  timestamp: Int!
  entryCount: Int!
  hasElection: Boolean!
}

type IntRange {
  min: Int!
  max: Int!
}